package com.example.memeshare

import android.app.VoiceInteractor
import android.content.Intent
import android.graphics.drawable.Drawable
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.View
import android.widget.Toast
import com.android.volley.Request
import com.android.volley.Response
import com.android.volley.toolbox.JsonObjectRequest
import com.android.volley.toolbox.Volley
import com.bumptech.glide.Glide
import com.bumptech.glide.load.DataSource
import com.bumptech.glide.load.engine.GlideException
import com.bumptech.glide.request.RequestListener
import com.bumptech.glide.request.target.Target
import com.example.memeshare.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private var currentImageUrl: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {

        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        loadMeme()

        binding.btnNext.setOnClickListener{
            loadMeme()
        }

        binding.btnShare.setOnClickListener{
            val intent = Intent(Intent.ACTION_SEND)
            intent.setType("text/plain")
            intent.putExtra(Intent.EXTRA_TEXT,"Checkout this meme $currentImageUrl")
            val chooser = Intent.createChooser(intent,"Share this meme !!")
            startActivity(chooser)
        }

    }

    fun loadMeme(){
        binding.progBar.visibility = View.VISIBLE
        //Instantiate the request queue
//        val queue = Volley.newRequestQueue(this)
        val url = "https://meme-api.herokuapp.com/gimme"

        //for getting the data from the API
        val jsonObjectRequest = JsonObjectRequest(Request.Method.GET, url, null,
            Response.Listener { response ->
                currentImageUrl = response.getString("url")
                //implementing glide with a listener to listen if the image is loaded or not, and according to that show progressBar
                //pass anonymous object of requestListener to the listener
                Glide.with(this).load(currentImageUrl).listener(object :RequestListener<Drawable>{
                    //if image loaded correctly (here most code is autogenerated)
                    override fun onResourceReady(
                        resource: Drawable?,
                        model: Any?,
                        target: Target<Drawable>?,
                        dataSource: DataSource?,
                        isFirstResource: Boolean
                    ): Boolean {
                        binding.progBar.visibility = View.GONE
                        return false
                    }

                    //if image not loaded
                    override fun onLoadFailed(
                        e: GlideException?,
                        model: Any?,
                        target: Target<Drawable>?,
                        isFirstResource: Boolean
                    ): Boolean {
                        binding.progBar.visibility = View.GONE
                        return false
                    }
                }).into(binding.ivMeme)

            },
            Response.ErrorListener {
                Toast.makeText(this,"Something went wrong !",Toast.LENGTH_SHORT)
            })

        //adding request to the RequestQueue (only one request will be created for the whole lifetime of the app)
        //for that we are making use of the singleton pattern for volley
        MySingleton.getInstance(this).addToRequestQueue(jsonObjectRequest)
    }
}